package edu.gmu.cs.infs614.webdealer.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

import edu.gmu.cs.infs614.webdealer.model.connector.CustomerConnection;
import edu.gmu.cs.infs614.webdealer.view.FormValidation;

import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.scene.control.TextField;

/* Customer model
CREATE TABLE Customer( 
customer_ID INTEGER, 
first_name VARCHAR2(30), 
last_name VARCHAR2(30), 
age INTEGER, 
email_address VARCHAR2(100), 
gender VARCHAR2(1), 
PRIMARY KEY (customer_ID)
);
INSERT INTO Customer VALUES (seq_customer.nextval,'John','Doe','30','jdoe@gmu.edu','m');
*/

// Immutable tuple
public class Customer {

	private final SimpleIntegerProperty cID; 
	private final SimpleStringProperty cFirstName;
	private final SimpleStringProperty cLastName;
	private final SimpleIntegerProperty cAge;
	private final SimpleStringProperty cEmailAddress;
	private final SimpleStringProperty cGender;
	private static Connection conn;
	
	
	
	// Think about how we can model the key that's generated by Oracle
	public Customer(Connection conn, Integer Customer_ID, String cFirstName, String cLastName, Integer cAge, String cEmailAddress, String cGender) {
		Customer.conn = conn;
		if(Customer_ID == null) {
			this.cID = new SimpleIntegerProperty(create(cFirstName,cLastName,cAge,cEmailAddress,cGender));
		}
		else {
			this.cID = new SimpleIntegerProperty(Customer_ID);
		}
		this.cFirstName = new SimpleStringProperty(cFirstName);
		this.cLastName = new SimpleStringProperty(cLastName);
		this.cAge = new SimpleIntegerProperty(cAge);
		this.cEmailAddress = new SimpleStringProperty(cEmailAddress);
		this.cGender = new SimpleStringProperty(cGender);
		System.out.println("Customer constructed");
	}

	// CRUD
	private int create(
			String cFirstName, String cLastName, 
			Integer cAge, String cEmailAddress, String cGender) {
		
		if(Customer.conn==null) {
			Customer.conn=new CustomerConnection("wward5","password").getConnection();
		}
		
		String sql = "BEGIN INSERT INTO " +
						"Customer (customer_ID,first_name,last_name,age,email_address,gender) " +
						"VALUES (seq_customer.nextval, ?, ?, ?, ?, ?) RETURNING customer_ID INTO ?; END;";
		
		java.sql.CallableStatement stmt = null;
		
		
		int generatedKey = 0;
		
		try {
			stmt = conn.prepareCall(sql);
			stmt.setString(1, cFirstName);
			stmt.setString(2, cLastName);
			stmt.setInt(3, cAge); 
			stmt.setString(4, cEmailAddress);
			stmt.setString(5, cGender);
			
			stmt.registerOutParameter(6, java.sql.Types.INTEGER);	
			stmt.execute();
			generatedKey = stmt.getInt(6);
			stmt.close();
			
		} catch (SQLException sqle) {
			System.err.println("Customer insert error: "+sqle);
		}
		
		System.out.println("Customer_ID: "+generatedKey);
		return generatedKey;
	}
	
	public static ArrayList<Customer> retrieve(
			Connection conn,
			TextField tfCustomer_ID,
			TextField tfFirstName, 
			TextField tfLastName, 
			TextField tfAge, 
			TextField tfEmailAddress, 
			TextField tfGender ) 
	{
		if(Customer.conn==null) {
			Customer.conn=new CustomerConnection("wward5","password").getConnection();
		}
		
		HashMap<String,TextField> map = new HashMap<String,TextField>();
		
		int start = 0;
		String sqlWhere = " WHERE ";
		if(FormValidation.textFieldTypeInteger(tfCustomer_ID)) {
			map.put("customer_ID", tfCustomer_ID);
			String customer_ID = "customer_ID = "+"\'"+tfCustomer_ID.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+customer_ID;
			sqlWhere += customer_ID;
			start++;
		}
		if(FormValidation.textFieldNotEmpty(tfFirstName)) {
			map.put("first_name", tfFirstName);
			String first_name = "first_name = "+"\'"+tfFirstName.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+first_name;
			else sqlWhere += first_name;
			start++;
		}
		if(FormValidation.textFieldNotEmpty(tfLastName)) {
			map.put("last_name", tfLastName);
			String last_name = "last_name = "+"\'"+tfLastName.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+last_name;
			else sqlWhere += last_name;
			start++;
		}
		if(FormValidation.textFieldTypeInteger(tfAge)) {
			map.put("age", tfAge);
			String age = "age = "+"\'"+tfAge.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+age;
			else sqlWhere += age;
			start++;
		}
		if(FormValidation.textFieldNotEmpty(tfEmailAddress)) {
			map.put("age", tfEmailAddress);
			String email_address = "email_address = "+"\'"+tfEmailAddress.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+email_address;
			else sqlWhere += email_address;
			start++;
		}
		if(FormValidation.textFieldNotEmpty(tfGender)) {
			map.put("gender", tfGender);
			String gender = "gender = "+"\'"+tfGender.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+gender;
			else sqlWhere += gender;
			start++;
		}
		
		
		PreparedStatement preparedStatement = null;
 
		String selectSQL;
		if(start>0) {
			selectSQL = "SELECT * FROM CUSTOMER "+sqlWhere;
		}else {
			selectSQL = "SELECT * FROM CUSTOMER";
		}
		
		System.out.println("Select String: "+selectSQL);
 
		ResultSet rs = null;
		ArrayList<Customer> cl = new ArrayList<Customer>();
		
		try {

			preparedStatement = conn.prepareStatement(selectSQL);
			
 
			// execute select SQL
			rs = preparedStatement.executeQuery();
 
			while (rs.next()) {
				
				cl.add(new Customer(Customer.conn,
						rs.getInt("customer_ID"),
						rs.getString("first_name"),
						rs.getString("last_name"),
						rs.getInt("age"),
						rs.getString("email_address"),
						rs.getString("gender")));
 
				System.out.println("customer_ID : " + rs.getString("customer_ID"));
				System.out.println("first_name : " + rs.getString("first_name"));
				System.out.println("last_name : " + rs.getString("last_name"));
				System.out.println("age : " + rs.getString("age"));
				System.out.println("email_address : " + rs.getString("email_address"));
				System.out.println("gender : " + rs.getString("gender"));
				
 
			}
 
			preparedStatement.close();
			//rs.first(); // It seems this non-scrollable result set resets to first automagically
			
			
		} catch (SQLException e) {
 
			System.out.println(e.getMessage());
			
		}
		
		
		return cl;
 
	}
	
	
	// getters 
	
	public Integer getCID() {
		return cID.get();
	}
	
	public String getCFirstName() {
		return cFirstName.get();
	}

	public String getCLastName() {
		return cLastName.get();
	}

	public Integer getCAge() {
		return cAge.get();
	}

	public String getCEmailAddress() {
		return cEmailAddress.get();
	}

	public String getCGender() {
		return cGender.get();
	}

	
	
	
}
