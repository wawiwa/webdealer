package edu.gmu.cs.infs614.webdealer.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.scene.control.TextField;
import edu.gmu.cs.infs614.webdealer.AppUtil;
import edu.gmu.cs.infs614.webdealer.model.connector.MerchantConnection;
import edu.gmu.cs.infs614.webdealer.model.connector.OracleConnection;
import edu.gmu.cs.infs614.webdealer.view.FormValidation;



// Immutable tuple
public class Merchant {

	public boolean isInDatabase = false;
	private SimpleIntegerProperty mID; 
	private SimpleStringProperty mName;
	private static Connection conn;

	
	public Merchant(Connection conn, Integer merchant_ID, String name) {
		this.mID = null;
		this.mName = null;
		Merchant.conn = conn;
		// create a new merchant in the database
		if(merchant_ID == null) {
			int result = create(name);
			if(result == -1) {
				isInDatabase = false;
				return;
			}
			else {
				isInDatabase = true;
			}
			
			this.mID = new SimpleIntegerProperty(result);
					
			}
		// create just a customer view
		else {
			this.mID = new SimpleIntegerProperty(merchant_ID);
		}
		
		this.mName = new SimpleStringProperty(name);
		AppUtil.console("Merchant constructed");
		
		
	}
	
	// Think about how we can model the key that's generated by Oracle	
	public Merchant(
			Connection conn,
			TextField tfMerchant_ID,
			TextField tfMerchantName ) {
		Merchant.conn = conn;
		// had to check for null before calling tfCustomer_ID.getText(), so we just copied the constructor code
		this.mID = null;
		this.mName = null;
		
		
		if(tfMerchant_ID == null) {
			int result = create(tfMerchantName.getText());
			if(result == -1) {
				isInDatabase = false;
				return;
			}
			else {
				isInDatabase = true;
			}
			this.mID = new SimpleIntegerProperty(result);
			}
		else {
			this.mID = new SimpleIntegerProperty(Integer.parseInt(tfMerchant_ID.getText()));
		}
		
		this.mName = new SimpleStringProperty(tfMerchantName.getText());

		AppUtil.console("Merchant constructed");
	}
	

	


	// CRUD
	private int create(String mName) {
		
		if(!connect()) AppUtil.console("Not able to connect to database!");
		
		String sql = "BEGIN INSERT INTO " +
						"Merchant (merchant_ID,merchant_name) " +
						"VALUES (seq_customer.nextval, ?) RETURNING merchant_ID INTO ?; END;";
		
		java.sql.CallableStatement stmt = null;
		
		
		int generatedKey = 0;
		
		try {
			stmt = conn.prepareCall(sql);
			stmt.setString(1, mName);
			
			stmt.registerOutParameter(2, java.sql.Types.INTEGER);	
			stmt.execute();
			generatedKey = stmt.getInt(2);
			stmt.close();
			
		} catch (SQLException sqle) {
			AppUtil.console("Merchant insert error: "+sqle);
			return -1;
		}
		
		AppUtil.console("Merchant_ID: "+generatedKey);
		return generatedKey;
	}
	
	public static ArrayList<Merchant> retrieve(
			Connection conn,
			TextField tfMerchant_ID,
			TextField tfMerchantName ) 
	{
		if(!connect()) AppUtil.console("Not able to connect to database!");
		
		int start = 0;
		String sqlWhere = " WHERE ";
		if(FormValidation.textFieldTypeInteger(tfMerchant_ID)) {
			String merchant_ID = "merchant_ID = "+"\'"+tfMerchant_ID.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+merchant_ID;
			sqlWhere += merchant_ID;
			start++;
		}
		if(FormValidation.textFieldNotEmpty(tfMerchantName)) {
			String merchant_name = "merchant_name = "+"\'"+tfMerchantName.getText()+"\'";
			if(start>0) sqlWhere+=" AND "+merchant_name;
			else sqlWhere += merchant_name;
			start++;
		}
		
		PreparedStatement preparedStatement = null;
 
		String selectSQL;
		if(start>0) {
			selectSQL = "SELECT * FROM MERCHANT "+sqlWhere;
		}else {
			selectSQL = "SELECT * FROM MERCHANT";
		}
		
		AppUtil.console("Select String: "+selectSQL);
 
		ResultSet rs = null;
		ArrayList<Merchant> cl = new ArrayList<Merchant>();
		
		try {

			preparedStatement = conn.prepareStatement(selectSQL);
			
 
			// execute select SQL
			rs = preparedStatement.executeQuery();
 
			while (rs.next()) {
				
				cl.add(new Merchant(Merchant.conn,
						rs.getInt("merchant_ID"),
						rs.getString("merchant_name")));
 
				AppUtil.console("merchant_ID : " + rs.getString("merchant_ID"));
				AppUtil.console("merchant_name : " + rs.getString("merchant_name"));
				
 
			}
 
			preparedStatement.close();
			//rs.first(); // It seems this non-scrollable result set resets to first automagically
			
			
		} catch (SQLException e) {
 
			AppUtil.console(e.getMessage());
			
		}
		
		
		return cl;
 
	}
	
	public static boolean update(Merchant oldMerchant, Merchant newMerchant) {
		if(!connect()) AppUtil.console("Not able to connect to database!");
		
		
		AppUtil.console("Modifying merchant: "+oldMerchant.getMName());
		
		String sql = "UPDATE Merchant SET "+
				"merchant_name = \'"+newMerchant.getMName()+"\'"+
				" WHERE customer_ID = \'"+newMerchant.getMID()+"\'";
		
		AppUtil.console("UPDATE: "+sql);

		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.executeQuery();
			preparedStatement.close();
		} catch (Exception e) {
			
			AppUtil.console("Most likely a DDL error, not a problem."+e);
			return false;
			
		}
		return true;
	}
	
		public static boolean delete(Merchant oldMerchant) {
			if(!connect()) AppUtil.console("Not able to connect to database!");
			
			
			AppUtil.console("Deleting merchant: "+oldMerchant.getMID());
			
			String sql = "DELETE FROM Merchant "+ 
					"WHERE merchant_ID = \'"+oldMerchant.getMID()+"\'";
			
			AppUtil.console("DELETE: "+sql);

			PreparedStatement preparedStatement = null;
			try {
				preparedStatement = conn.prepareStatement(sql);
				preparedStatement.executeQuery();
				preparedStatement.close();
			} catch (Exception e) {
				AppUtil.console("Most likely a DDL error, not a problem."+e);
			}
			return true;
		}
	
	
	// getters 
	
	public Integer getMID() {
		return mID.get();
	}
	
	public String getMName() {
		return mName.get();
	}

	private static boolean connect() {
		if(Merchant.conn==null) {
			Merchant.conn=new MerchantConnection(OracleConnection.user,OracleConnection.pass).getConnection();
			return true;
		}
		return true;
	}
	
}
